# Compile project on Ubuntu
name: Ubuntu

on:
  push:
    paths:
      - "**"
      - "!.github/**"
      - ".github/workflows/Ubuntu.yml"
  # pull_request:
  #   paths:
  #     - "**"
  #     - "!.github"
  #     - ".github/workflows/Ubuntu.yml"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # explicit include-based build matrix, of known valid options
      matrix:
        include:
          - os: ubuntu-20.04
            cuda: "11.4"
            gcc: 10
    env:
      build_dir: "build"
      config: "Release"

    steps:
    - uses: actions/checkout@v2

    # Specify the correct host compilers
    - name: Install/Select gcc and g++ 
      run: |
        sudo apt-get install -y gcc-${{ matrix.gcc }} g++-${{ matrix.gcc }}
        echo "CC=/usr/bin/gcc-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV
        echo "CUDAHOSTCXX=/usr/bin/g++-${{ matrix.gcc }}" >> $GITHUB_ENV

    - name: Create Build Environment
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install cmake
    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install conan

    - name: Configure cmake
      id: configure
      run: cmake . -B ${{ env.build_dir }} -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=${{ env.config }}

    - name: Configure Error Processing
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      working-directory: ${{ env.build_dir }}
      run: |
          if [[ -f "CMakeFiles/CMakeOutput.log" ]]; then
            echo "---- CMakeFiles/CMakeOutput.log"
            cat CMakeFiles/CMakeOutput.log
            echo "----"
          fi
          if [[ -f "CMakeFiles/CMakeError.log" ]]; then
            echo "---- CMakeFiles/CMakeError.log"
            cat CMakeFiles/CMakeError.log
            echo "----"
          fi

    - name: Build
      working-directory: ${{ env.build_dir }}
      run: cmake --build . --target all --verbose -j `nproc`

    - name: Test
      working-directory: ${{ env.build_dir }}
      run: ctest -C $BUILD_TYPE